
@{
    ViewBag.Title = "ReprimarySaleReport";
}

@Html.AntiForgeryToken()

<div class="box box-warning">
    <div class="box-header with-border">
        <div class="box-header-left">
            <h3 class="box-title" style="line-height:2px;">Reprimary Sales Report</h3>
        </div>
        <div class="box-header-right">
            <ul>
                <li>
                    <a href="javascript:void(0)" title="Excel" class="cart" onclick="Excel()"><i class="fa fa-file-excel-o"></i></a>
                </li>
            </ul>
        </div>
    </div>
    <div class="box-body">
        <form class="form-horizontal">
            <div class="row" id="DivddlCustomer" style="display:none">
                <div class="col-md-4">
                    <div id="ddlCustomer"></div>
                </div><br /><br />

                <div class="col-md-2">
                    <div id="txtFromDate"></div>
                </div>
                <div class="col-md-2">
                    <div id="txtToDate"></div>
                </div>
                <div class="col-md-3">
                    <div id="ddlReportType"></div>
                </div>
                <div class="col-md-1">
                    <a href='javascript:void(0)' class='btn btn-danger btn-flat' style='background: #e32228;' onclick='ReprimarySaleReportFromDateToDateReport()'>Get Data</a><input type="hidden" id="HdnUserTypeId"><input type="hidden" id="HdnSelectedUser">
                </div>
            </div>
        </form>

     

        <div class="row">
            <div class="col-md-12">
                <div class="table-responsive ">
                    <div id="tblitem">
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    var RetailCategoryList = [];
    var varddlSubCategory = "";
    var ItemList = [];
    var SalesReportList = [];
    var InventoryitemDetails = [];
    var varddlCategory = "";
    var varddlItem = "";
    var Now = new Date()
    var FDate = new Date()
    var CustomerList = [];
    var varddlCustomer = "";
    var varddlBuyer = "";
    var ReportTypeList = [];
    var varddlReportType = "";

    arrayCr = @Html.Raw(Json.Encode(@ViewBag.RetailCategoryList));
    if(arrayCr !=null)
    {
        for(var i = 0; i < arrayCr.length; i++){
            RetailCategoryList[i] = arrayCr[i];
        }
         //model = {};
         //model.RetailCategoryID = -1
         //model.RetailCategory = "All"
         //RetailCategoryList.push(model);

    }

    strUserTypeId = @Html.Raw(@ViewBag.UserTypeID);
    arrayCr1 = @Html.Raw(Json.Encode(@ViewBag.CustomerList));
    arrayRT = @Html.Raw("[{\"ReportType\":\"Partywise Summary\",\"ReportID\":1}, {\"ReportType\":\"Productwise Summary\",\"ReportID\":2}]");
    //, {\"ReportType\":\"Party Productwise Summary\",\"ReportID\":3}, {\"ReportType\":\"Product Partywise Summary\",\"ReportID\":4}
    if(arrayCr1 !=null)
    {
        for(var i = 0; i < arrayCr1.length; i++){
            CustomerList[i] = arrayCr1[i];
        }
         

    }
    
    if (strUserTypeId == "22" || strUserTypeId == "23" ) {
        $("#DivddlCustomer").removeAttr("style");
    }

    for (var j = 0; j < arrayRT.length; j++) {
        ReportTypeList[j] = arrayRT[j];
    }

    $(document).ready(function () {
        


        $("#txtFromDate").dxDateBox({
            height: 30,
            type: "date",
            value: FDate.setDate(FDate.getDate() - 7),
            placeholder: "From Date",
            displayFormat: "dd/MM/yyyy"
        });
        $("#txtToDate").dxDateBox({
            height: 30,
            type: "date",
            value: Now,
            placeholder: "To Date",
            displayFormat: "dd/MM/yyyy"
        });
        //dxSelectBox
        $("#ddlCustomer").dxTagBox({
            height: 30,
            dataSource: new DevExpress.data.ArrayStore({
                data: CustomerList,
                key: "PartyID"
            }),
            displayExpr: "Party",
            valueExpr: "PartyID",
            placeholder: "Select Stockist",
            searchEnabled: true,
            showSelectionControls: true,
            onValueChanged: function (data) {
                varddlCustomer = data.value
                GetBuyersbyPartyID();
            }
        });
        $("#ddlReportType").dxSelectBox({
            height: 30,
            dataSource: new DevExpress.data.ArrayStore({
                data: ReportTypeList,
                key: "ReportID"
            }),
            displayExpr: "ReportType",
            valueExpr: "ReportID",
            placeholder: "Select Report Type",
            searchEnabled: true,
            onValueChanged: function (data) {
                varddlReportType = data.value                
                //BindReportdata(varddlReportType)
            }
        });
        GetBuyersbyPartyID();
    });

    function SetDate(dateStr) {
        var strDate
        var now = new Date(dateStr);
        var Day = now.getDate()
        var Month = (now.getMonth() + 1)
        var Year = now.getFullYear()
        if (Day < 10) {
            Day = "0" + Day;
        }
        if (Month < 10) {
            Month = "0" + Month;
        }
        strDate = Month + "/" + Day + "/" + Year
        return strDate;
    }


    function ItemMasterGetByRetailCategoryId() {
        try {
            debugger;
            if (varddlSubCategory == undefined || varddlSubCategory == null || varddlSubCategory == "") {
                return true
            }
            loadPanel.show();
            var data = { 'RetailCategoryId': varddlSubCategory };
            var dataWithAntiforgeryToken = $.extend(data, { '__RequestVerificationToken': $("input[name='__RequestVerificationToken']").val() });
            $.ajax({
                url: "../Report/ItemMasterGetByRetailCategoryId",
                type: 'POST',
                dataType: 'json',
                async: true,
                data: dataWithAntiforgeryToken,
                success: function (Response) {
                    loadPanel.hide();
                    if (Response.StatusId != "99") {
                        ItemList = Response.Result;
                     
                        $("#ddlItem").dxSelectBox('instance').option("dataSource", ItemList);
                    }
                    else {
                        alert(Response.Status);
                    }
                },
                error: function (xhr) {
                    loadPanel.hide();
                    alert("Data size is too large!");
                }
            });
        }
        catch (e) {
            loadPanel.hide();
            alert("Data size is too large!");
        }
    }


    function GetBuyersbyPartyID() {
        try {
            debugger;
            //commented by Kamini for multiselect of dropdown on 23 July 2022
            //var strParty = $("#ddlCustomer").dxSelectBox('instance').option('value');
            var strParty = $("#ddlCustomer").dxTagBox("instance").option("selectedItems");
            var PartyVal = "";
          
            var data = { 'PartyID': PartyVal };
            var dataWithAntiforgeryToken = $.extend(data, { '__RequestVerificationToken': $("input[name='__RequestVerificationToken']").val() });
            $.ajax({
                url: "../Home/GetBuyersbyPartyID",
                type: 'POST',
                dataType: 'json',
                data: dataWithAntiforgeryToken,
                async: true,
                success: function (Response) {
                    if (Response.StatusId != "99") {
                        BuyerList = Response.Result;
                        //model = {};
                        //model.PartyId = 0
                        //model.Party = "All"
                        //BuyerList.push(model);
                       fillbuyer()
                    }
                    else {
                        alert(Response.Status);
                    }
                },
                error: function (xhr) {
                    alert("Data size is too large!");
                }
            });
        }
        catch (e) {
            alert("Data size is too large!");
        }
    } 

    function fillbuyer() {
        $("#txtBuyer").dxSelectBox({
            dataSource: new DevExpress.data.ArrayStore({
                data: BuyerList,
                key: "PartyID"
            }),
            displayExpr: "Party",
            valueExpr: "PartyID",
            placeholder: "Select Customer",
            searchEnabled: true,
            onValueChanged: function (data) {
                varddlBuyer = data.value;
            }
        });
    }


    function ReprimarySaleReportFromDateToDateReport() {
        debugger;
        try
        {
            var PartyIdList = "";
            if ( strUserTypeId == "22" || strUserTypeId == "23") {
                //if (varddlCustomer == "" && (strUserTypeId == "21" || strUserTypeId == "22" || strUserTypeId == "23")) {
                //    alert("Please select Stockist.");
                //    $('#ddlCustomer').focus();
                //    return false;
                //}
                if (varddlCustomer == undefined || varddlCustomer == null) {
                    return true
                }
            }
            
            if (varddlReportType == "") {
                alert("Please select ReportType");
                $('#ddlReportType').focus();
                return false;
            }
            
            loadPanel.show();
            var VarFromdate = SetDate($("#txtFromDate").dxDateBox('instance').option('value'));
            var VarToDate = SetDate($("#txtToDate").dxDateBox('instance').option('value'));

            var VarPartyId = "0";
            var VarBuyerId = "0";
            if (varddlBuyer != "")
                {
                VarBuyerId = varddlBuyer;
            }
            if (strUserTypeId == "22" || strUserTypeId == "23") {

                //added by Kamini on 22 July 2022 for multiple super stockist selection
                var strParty = $("#ddlCustomer").dxTagBox("instance").option("selectedItems");
                if (strParty.length == 1) {
                    VarPartyId = strParty[0].PartyID;
                }
                else {
                    for (z = 0; z < strParty.length; z++) {
                        PartyIdList = PartyIdList + strParty[z].PartyID + ",";
                    }
                    VarPartyId = PartyIdList.substring(0, PartyIdList.length - 1);
                }
          
            }
          
            if (VarPartyId == "")
                VarPartyId = "0";
       

            var data = {
                'SuperStockistID': VarPartyId, 'ReportTypeID': varddlReportType,'Fromdate': VarFromdate, 'Todate': VarToDate};



            //var dataWithAntiforgeryToken = $.extend(data, { '__RequestVerificationToken': $("input[name='__RequestVerificationToken']").val() });
            //alert(dataWithAntiforgeryToken);
            $.ajax({
                url: "../Report/ReprimarySaleReportFromDateToDateReport",
                type: 'POST',
                dataType: 'json',
                async: true,
                data: data,
                success: function (Response) {
                    loadPanel.hide();
                    if (Response.StatusId != "99") {
                        SalesReportList = Response.Result;                 
                        //$("#tblitem").dxDataGrid('instance').option("dataSource", SalesReportList);
                        BindReportdata();
                        fillbuyer();
                    }
                    else {
                        alert(Response.Status);
                    }
                },
                error: function (xhr) {
                    loadPanel.hide();
                    alert("Data size is too large!");
                }
            });
        }
        catch (e) {
            loadPanel.hide();
            alert("Data size is too large!");
        }
    }


    function GetColumn() {
        var retUArr = [];    
        if (Number(varddlReportType) == 1) {
            retUArr = [
               
                {
                    dataField: "PartyCode", caption: "PartyCode",  headerCellTemplate: function (header, info) {
                        $('<div>').html("Party<br/>Code").css('text-align', 'center').appendTo(header);
                    },
                },
                {
                    dataField: "Party", caption: "Party",  headerCellTemplate: function (header, info) {
                        $('<div>').html("Party").css('text-align', 'center').appendTo(header);
                    },
                },
                {
                    dataField: "Region", caption: "Region"
                },
                {
                    dataField: "SalesZone", caption: "SalesZone", headerCellTemplate: function (header, info) {
                        $('<div>').html("Sales<br/>Zone<br/>").css('text-align', 'center').appendTo(header);
                    }, format: { type: "fixedPoint", precision: 2 }
                },
                {
                    dataField: "Quantity", caption: "Quantity", headerCellTemplate: function (header, info) {
                        $('<div>').html("Quantity").css('text-align', 'center').appendTo(header);
                    }, format: { type: "fixedPoint", precision: 2 }
                },
                {
                    dataField: "GrossItemAmount", caption: "GrossItemAmount", headerCellTemplate: function (header, info) {
                        $('<div>').html("Gross<br/>Item<br/>Amount").css('text-align', 'center').appendTo(header);
                    }, format: { type: "fixedPoint", precision: 2 }
                },
                {
                    dataField: "DiscountAmount", caption: "DiscountAmount", format: { type: "fixedPoint", precision: 2 }
                },
                {
                    dataField: "TaxableAmount", caption: "TaxableAmount", format: { type: "fixedPoint", precision: 2 }
                },
                {
                    dataField: "CGST", caption: "CGST", format: { type: "fixedPoint", precision: 2 }
                },
                {
                    dataField: "SGST", caption: "SGST", headerCellTemplate: function (header, info) {
                        $('<div>').html("SGST").css('text-align', 'center').appendTo(header);
                    }, format: { type: "fixedPoint", precision: 2 }
                },
                {
                    dataField: "IGST", caption: "IGST", headerCellTemplate: function (header, info) {
                        $('<div>').html("IGST").css('text-align', 'center').appendTo(header);
                    }, format: { type: "fixedPoint", precision: 2 }
                },
                {
                    dataField: "NetValue", caption: "NetValue", format: { type: "fixedPoint", precision: 2 }
                }

            ]

        }
        else if (Number(varddlReportType) == 2) {
            retUArr = [
                
                {
                    dataField: "ParentProductType", groupIndex: 0,  caption: "ParentProductType", headerCellTemplate: function (header, info) {
                        $('<div>').html("Parent<br/>Product<br/>Type").css('text-align', 'center').appendTo(header);
                    },
                },
                {
                    dataField: "ProductType", groupIndex: 1, caption: "ProductType", headerCellTemplate: function (header, info) {
                        $('<div>').html("Product<br/>Type").css('text-align', 'center').appendTo(header);
                    },
                },
                {
                    dataField: "ItemCode", caption: "Item Code"
                },
                {
                    dataField: "ItemName", caption: "ItemName", headerCellTemplate: function (header, info) {
                        $('<div>').html("Item<br/>Name").css('text-align', 'center').appendTo(header);
                    }, format: { type: "fixedPoint", precision: 2 }
                },
                {
                    dataField: "Quantity", caption: "Quantity", headerCellTemplate: function (header, info) {
                        $('<div>').html("Quantity").css('text-align', 'center').appendTo(header);
                    }, format: { type: "fixedPoint", precision: 2 }
                },
                {
                    dataField: "GrossItemAmount", caption: "GrossItemAmount", headerCellTemplate: function (header, info) {
                        $('<div>').html("Gross<br/>Item<br/>Amount").css('text-align', 'center').appendTo(header);
                    }, format: { type: "fixedPoint", precision: 2 }
                },
                {
                    dataField: "DiscountAmount", caption: "Discount Amount", format: { type: "fixedPoint", precision: 2 }
                },
                {
                    dataField: "TaxableAmount", caption: "Taxable Amount", format: { type: "fixedPoint", precision: 2 }
                },
                {
                    dataField: "CGST", caption: "CGST", format: { type: "fixedPoint", precision: 2 }
                },
                {
                    dataField: "SGST", caption: "SGST", headerCellTemplate: function (header, info) {
                        $('<div>').html("SGST").css('text-align', 'center').appendTo(header);
                    }, format: { type: "fixedPoint", precision: 2 }
                },
                {
                    dataField: "IGST", caption: "IGST", headerCellTemplate: function (header, info) {
                        $('<div>').html("IGST").css('text-align', 'center').appendTo(header);
                    }, format: { type: "fixedPoint", precision: 2 }
                },
                {
                    dataField: "NetValue", caption: "Net Value", format: { type: "fixedPoint", precision: 2 }
                }

            ]
        }
        debugger;
        return retUArr;
        
    }

    function GetColumn1() {
        var retUArr1 = [];
        if (Number(varddlReportType) == 1) {
            retUArr1 = [
                { name: "SalesZone", column: "SalesZone", displayFormat: "Grand Total" },
                { name: "Quantity", column: "Quantity", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, displayFormat: "{0}" },
                { name: "GrossItemAmount", column: "GrossItemAmount", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, displayFormat: "{0}" },
                { name: "DiscountAmount", column: "DiscountAmount", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, displayFormat: "{0}" },
                { name: "TaxableAmount", column: "TaxableAmount", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, displayFormat: "{0}" },
                { name: "CGST", column: "CGST", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, displayFormat: "{0}" },
                { name: "SGST", column: "SGST", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, displayFormat: "{0}" },
                { name: "IGST", column: "IGST", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, displayFormat: "{0}" },
                { name: "NetValue", column: "NetValue", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, displayFormat: "{0}" },
                
            ]
        }
        if (Number(varddlReportType) == 2) {
            retUArr1 = [
                { name: "ItemName", column: "ItemName", displayFormat: "Grand Total" },
                { name: "Quantity", column: "Quantity", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, displayFormat: "{0}" },
                { name: "GrossItemAmount", column: "GrossItemAmount", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, displayFormat: "{0}" },
                { name: "DiscountAmount", column: "DiscountAmount", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, displayFormat: "{0}" },
                { name: "TaxableAmount", column: "TaxableAmount", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, displayFormat: "{0}" },
                { name: "CGST", column: "CGST", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, displayFormat: "{0}" },
                { name: "SGST", column: "SGST", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, displayFormat: "{0}" },
                { name: "IGST", column: "IGST", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, displayFormat: "{0}" },
                { name: "NetValue", column: "NetValue", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, displayFormat: "{0}" },
            ]
        }
        return retUArr1;
    }

    function GetColumn2() {
        var retUArr2 = [];
        //if (Number(varddlReportType) == 1) {
        //    retUArr2 = [
        //        { name: "SalesZone", column: "SalesZone", showInGroupFooter: true, displayFormat: "Total" },
        //        { name: "Quantity", column: "Quantity", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, showInGroupFooter: true, displayFormat: "{0}" },
        //        { name: "GrossItemAmount", column: "GrossItemAmount", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, showInGroupFooter: true, displayFormat: "{0}" },
        //        { name: "DiscountAmount", column: "DiscountAmount", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, showInGroupFooter: true, displayFormat: "{0}" },
        //        { name: "TaxableValue", column: "TaxableValue", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, showInGroupFooter: true, displayFormat: "{0}" },
        //        { name: "CGST", column: "CGST", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, showInGroupFooter: true, displayFormat: "{0}" },
        //        { name: "SGST", column: "SGST", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, showInGroupFooter: true, displayFormat: "{0}" },
        //        { name: "IGST", column: "IGST", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, showInGroupFooter: true, displayFormat: "{0}" },
        //        { name: "NetValue", column: "NetValue", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, showInGroupFooter: true, displayFormat: "{0}" },
        //    ]
        //}
        if (Number(varddlReportType) == 2) {
            retUArr2 = [
                { name: "ItemName", column: "ItemName", showInGroupFooter: true, displayFormat: "Total" },
                { name: "Quantity", column: "Quantity", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, showInGroupFooter: true, displayFormat: "{0}" },
                { name: "GrossItemAmount", column: "GrossItemAmount", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, showInGroupFooter: true, displayFormat: "{0}" },
                { name: "DiscountAmount", column: "DiscountAmount", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, showInGroupFooter: true, displayFormat: "{0}" },
                { name: "TaxableValue", column: "TaxableValue", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, showInGroupFooter: true, displayFormat: "{0}" },
                { name: "CGST", column: "CGST", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, showInGroupFooter: true, displayFormat: "{0}" },
                { name: "SGST", column: "SGST", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, showInGroupFooter: true, displayFormat: "{0}" },
                { name: "IGST", column: "IGST", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, showInGroupFooter: true, displayFormat: "{0}" },
                { name: "NetValue", column: "NetValue", summaryType: "sum", valueFormat: { type: "fixedPoint", precision: 2 }, showInGroupFooter: true, displayFormat: "{0}" },
            ]
        }
        return retUArr2;
    }

    function BindReportdata() {

      
        $("#tblitem").dxDataGrid({
            dataSource: SalesReportList,
            loadPanel: {
                enabled: true
            },
            height: 500,
            allowSorting: true,
            columnAutoWidth: true,
            allowColumnResizing: true,
            filterRow: { visible: true },
            headerFilter: {
                visible: true,
                allowSearch: true
            },
            paging: {
                pageSize: 20,
                enabled: false
            },
            columnFixing: {
                enabled: true
            },
            groupPanel: {
                visible: true,
                allowColumnDragging: true
            },
            columns: GetColumn(),
            export: {
                fileName: "Reprimary Sale Report"
            },
            showRowLines: true,
            showBorders: true,
            summary: {
                totalItems: GetColumn1(),

                groupItems: GetColumn2()    
            }


        });
        
    }
    
    function Excel() {
        $("#tblitem").dxDataGrid("instance").exportToExcel(false);
    }  
</script>

